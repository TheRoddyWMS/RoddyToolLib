/*
 * Copyright (c) 2017 German Cancer Research Center (DKFZ).
 *
 * Distributed under the MIT License (license terms are at https://www.github.com/theroddywms/Roddy/LICENSE.txt).
 */

import org.cyclonedx.gradle.CycloneDxTask

plugins {
    id 'org.ajoberstar.grgit' version '4.1.1'
    id 'org.cyclonedx.bom' version '1.8.2'
    id 'maven-publish'
}

apply plugin: 'groovy'

group = "com.github.theroddywms"

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }
}


/*
 * Gets the version name from the current Git tag. If the current commit is not tagged,
 * this returned string will indicate that. Also if the repository is dirty.
 */
def getVersionName() {
    def dirtySuffix = grgit.status().isClean() ? '' : '-dirty'
    return grgit.describe() + dirtySuffix
}

rootProject.version = getVersionName()

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.codehaus.groovy:groovy-all:2.4.21'
    testImplementation 'junit:junit:4.13.1'
    testImplementation 'org.spockframework:spock-core:1.1-groovy-2.4'
    implementation group: 'commons-codec', name: 'commons-codec', version: '1.13'
    implementation group: 'org.apache.commons', name: 'commons-io', version: '1.3.2'
    implementation group: 'org.apache.commons', name: 'commons-text', version: '1.11.0'
    implementation 'com.google.guava:guava:32.0.0-android'

    // Runtime retention of @NotNull and annotations.
    implementation 'com.github.bbottema:jetbrains-runtime-annotations:1.0.1'
}

model {
    tasks.generatePomFileForMavenJavaPublication {
        destination = file("$buildDir/pom.xml")
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            pom {
                name = 'RoddyToolLib'
                url = "https://www.github.com/theroddywms/RoddyToolLib"
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://raw.githubusercontent.com/eilslabs/RoddyToolLib/master/LICENSE'
                    }
                }
            }
        }
    }
}

jar {
    version = getVersionName()
    manifest {
        attributes("Implementation-Vendor": "German Cancer Research Center (DKFZ)")
        attributes("Implementation-Title": archiveBaseName.get())
        attributes 'Implementation-Version': rootProject.version
    }

    into("META-INF/maven/$project.group/$project.name") {
        from generatePomFileForMavenJavaPublication
        from "$buildDir/pom.xml"
    }
}

test {
    workingDir = System.getProperty("user.dir")
    ignoreFailures = project.hasProperty("ignoreFailedTests")

    testLogging {
        debug {
            events "started", "skipped", "failed"
            exceptionFormat "full"
        }
        events "failed"
        exceptionFormat "full"
        setShowStandardStreams true
    }
}

task listConfigurations {
    group = "reporting"
    description = "List all configurations, as needed for discerning development and production configurations by the SBOM tasks."
    doLast {
        configurations.each { Configuration c ->
            println c.name
        }
    }
}

task allBoms() {
    // a grouping task to execute the CycloneDxTask for each configuration
    group = "reporting"
}

rootProject.configurations.each { configuration ->
    String name = configuration.name
    task "${name}Bom"(type: CycloneDxTask) {
        group = "reporting"
        description = "Creates a CycloneDX SBOM for the configuration ${name}."

        destination = file("${project.buildDir}/reports/cyclonedx")
        outputName = name
        includeConfigs = [name]
        schemaVersion = "1.5"
        outputFormat="json"
        includeLicenseText = false
        projectType = "application"
    }
    allBoms.dependsOn tasks.getByName("${name}Bom")
}
